/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AssetStoreCoreInterface extends ethers.utils.Interface {
  functions: {
    "decoder()": FunctionFragment;
    "getAssetCount()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerAsset((string,string,string,string,address,bytes,tuple[]))": FunctionFragment;
    "registerAssets(tuple[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validator()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "decoder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [
      {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAssets",
    values: [
      {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "validator", values?: undefined): string;

  decodeFunctionResult(functionFragment: "decoder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;

  events: {
    "AssetRegistered(address,uint256)": EventFragment;
    "CategoryAdded(string,string)": EventFragment;
    "GroupAdded(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AssetRegisteredEvent = TypedEvent<
  [string, BigNumber] & { from: string; assetId: BigNumber }
>;

export type CategoryAddedEvent = TypedEvent<
  [string, string] & { group: string; category: string }
>;

export type GroupAddedEvent = TypedEvent<[string] & { group: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class AssetStoreCore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AssetStoreCoreInterface;

  functions: {
    decoder(overrides?: CallOverrides): Promise<[string]>;

    getAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerAsset(
      _assetInfo: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAssets(
      _assetInfos: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validator(overrides?: CallOverrides): Promise<[string]>;
  };

  decoder(overrides?: CallOverrides): Promise<string>;

  getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerAsset(
    _assetInfo: {
      group: string;
      category: string;
      name: string;
      minter: string;
      soulbound: string;
      metadata: BytesLike;
      parts: { body: BytesLike; color: string }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAssets(
    _assetInfos: {
      group: string;
      category: string;
      name: string;
      minter: string;
      soulbound: string;
      metadata: BytesLike;
      parts: { body: BytesLike; color: string }[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    decoder(overrides?: CallOverrides): Promise<string>;

    getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerAsset(
      _assetInfo: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAssets(
      _assetInfos: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AssetRegistered(address,uint256)"(
      from?: null,
      assetId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; assetId: BigNumber }
    >;

    AssetRegistered(
      from?: null,
      assetId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; assetId: BigNumber }
    >;

    "CategoryAdded(string,string)"(
      group?: null,
      category?: null
    ): TypedEventFilter<[string, string], { group: string; category: string }>;

    CategoryAdded(
      group?: null,
      category?: null
    ): TypedEventFilter<[string, string], { group: string; category: string }>;

    "GroupAdded(string)"(
      group?: null
    ): TypedEventFilter<[string], { group: string }>;

    GroupAdded(group?: null): TypedEventFilter<[string], { group: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    decoder(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerAsset(
      _assetInfo: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAssets(
      _assetInfos: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    decoder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAsset(
      _assetInfo: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAssets(
      _assetInfos: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
