/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface AssetStoreInterface extends ethers.utils.Interface {
  functions: {
    "admin()": FunctionFragment;
    "decoder()": FunctionFragment;
    "generateSVG(uint256)": FunctionFragment;
    "generateSVGPart(uint256,string)": FunctionFragment;
    "getAssetCount()": FunctionFragment;
    "getAssetCountInCategory(string,string)": FunctionFragment;
    "getAssetIdInCategory(string,string,uint32)": FunctionFragment;
    "getAssetIdWithName(string,string,string)": FunctionFragment;
    "getAttributes(uint256)": FunctionFragment;
    "getCategoryCount(string)": FunctionFragment;
    "getCategoryNameAtIndex(string,uint32)": FunctionFragment;
    "getGroupCount()": FunctionFragment;
    "getGroupNameAtIndex(uint32)": FunctionFragment;
    "getRawAsset(uint256)": FunctionFragment;
    "getRawPart(uint256)": FunctionFragment;
    "getStringValidator()": FunctionFragment;
    "owner()": FunctionFragment;
    "registerAsset((string,string,string,string,address,bytes,tuple[]))": FunctionFragment;
    "registerAssets(tuple[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAdmin(address)": FunctionFragment;
    "setDisableWhitelist(bool)": FunctionFragment;
    "setDisabled(uint256,bool)": FunctionFragment;
    "setPathDecoder(address)": FunctionFragment;
    "setValidator(address)": FunctionFragment;
    "setWhitelistStatus(address,bool)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "validator()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(functionFragment: "decoder", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "generateSVG",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "generateSVGPart",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetCountInCategory",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetIdInCategory",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAssetIdWithName",
    values: [string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "getAttributes",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryCount",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getCategoryNameAtIndex",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGroupNameAtIndex",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRawAsset",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRawPart",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStringValidator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [
      {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAssets",
    values: [
      {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setAdmin", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setDisableWhitelist",
    values: [boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setDisabled",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "setPathDecoder",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setValidator",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhitelistStatus",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "validator", values?: undefined): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "decoder", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "generateSVG",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateSVGPart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetCountInCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetIdInCategory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAssetIdWithName",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAttributes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCategoryNameAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGroupNameAtIndex",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRawAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRawPart", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStringValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAdmin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDisableWhitelist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDisabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPathDecoder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhitelistStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "validator", data: BytesLike): Result;

  events: {
    "AssetRegistered(address,uint256)": EventFragment;
    "CategoryAdded(string,string)": EventFragment;
    "GroupAdded(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AssetRegistered"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "CategoryAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GroupAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
}

export type AssetRegisteredEvent = TypedEvent<
  [string, BigNumber] & { from: string; assetId: BigNumber }
>;

export type CategoryAddedEvent = TypedEvent<
  [string, string] & { group: string; category: string }
>;

export type GroupAddedEvent = TypedEvent<[string] & { group: string }>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export class AssetStore extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: AssetStoreInterface;

  functions: {
    admin(overrides?: CallOverrides): Promise<[string]>;

    decoder(overrides?: CallOverrides): Promise<[string]>;

    generateSVG(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    generateSVGPart(
      _assetId: BigNumberish,
      _tag: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getAssetCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getAssetCountInCategory(
      _group: string,
      _category: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getAssetIdInCategory(
      _group: string,
      _category: string,
      _assetIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAssetIdWithName(
      _group: string,
      _category: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getAttributes(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [
          string,
          string,
          string,
          string,
          string,
          string,
          string,
          number,
          number
        ] & {
          group: string;
          category: string;
          name: string;
          tag: string;
          minter: string;
          soulbound: string;
          metadata: string;
          width: number;
          height: number;
        }
      ]
    >;

    getCategoryCount(
      _group: string,
      overrides?: CallOverrides
    ): Promise<[number]>;

    getCategoryNameAtIndex(
      _group: string,
      _categoryIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getGroupCount(overrides?: CallOverrides): Promise<[number]>;

    getGroupNameAtIndex(
      _groupIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRawAsset(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [number, number, string, string, string, string, BigNumber[]] & {
          groupId: number;
          categoryId: number;
          name: string;
          minter: string;
          metadata: string;
          soulbound: string;
          partsIds: BigNumber[];
        }
      ]
    >;

    getRawPart(
      _partId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[[string, string] & { body: string; color: string }]>;

    getStringValidator(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    registerAsset(
      _assetInfo: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAssets(
      _assetInfos: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisableWhitelist(
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setDisabled(
      _assetId: BigNumberish,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setPathDecoder(
      _decoder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setValidator(
      _validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setWhitelistStatus(
      _address: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    validator(overrides?: CallOverrides): Promise<[string]>;
  };

  admin(overrides?: CallOverrides): Promise<string>;

  decoder(overrides?: CallOverrides): Promise<string>;

  generateSVG(
    _assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  generateSVGPart(
    _assetId: BigNumberish,
    _tag: string,
    overrides?: CallOverrides
  ): Promise<string>;

  getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

  getAssetCountInCategory(
    _group: string,
    _category: string,
    overrides?: CallOverrides
  ): Promise<number>;

  getAssetIdInCategory(
    _group: string,
    _category: string,
    _assetIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAssetIdWithName(
    _group: string,
    _category: string,
    _name: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getAttributes(
    _assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, string, string, string, string, string, string, number, number] & {
      group: string;
      category: string;
      name: string;
      tag: string;
      minter: string;
      soulbound: string;
      metadata: string;
      width: number;
      height: number;
    }
  >;

  getCategoryCount(_group: string, overrides?: CallOverrides): Promise<number>;

  getCategoryNameAtIndex(
    _group: string,
    _categoryIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getGroupCount(overrides?: CallOverrides): Promise<number>;

  getGroupNameAtIndex(
    _groupIndex: BigNumberish,
    overrides?: CallOverrides
  ): Promise<string>;

  getRawAsset(
    _assetId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, number, string, string, string, string, BigNumber[]] & {
      groupId: number;
      categoryId: number;
      name: string;
      minter: string;
      metadata: string;
      soulbound: string;
      partsIds: BigNumber[];
    }
  >;

  getRawPart(
    _partId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<[string, string] & { body: string; color: string }>;

  getStringValidator(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  registerAsset(
    _assetInfo: {
      group: string;
      category: string;
      name: string;
      minter: string;
      soulbound: string;
      metadata: BytesLike;
      parts: { body: BytesLike; color: string }[];
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAssets(
    _assetInfos: {
      group: string;
      category: string;
      name: string;
      minter: string;
      soulbound: string;
      metadata: BytesLike;
      parts: { body: BytesLike; color: string }[];
    }[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setAdmin(
    _admin: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisableWhitelist(
    _disable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setDisabled(
    _assetId: BigNumberish,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setPathDecoder(
    _decoder: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setValidator(
    _validator: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setWhitelistStatus(
    _address: string,
    _status: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  validator(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    admin(overrides?: CallOverrides): Promise<string>;

    decoder(overrides?: CallOverrides): Promise<string>;

    generateSVG(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    generateSVGPart(
      _assetId: BigNumberish,
      _tag: string,
      overrides?: CallOverrides
    ): Promise<string>;

    getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetCountInCategory(
      _group: string,
      _category: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getAssetIdInCategory(
      _group: string,
      _category: string,
      _assetIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetIdWithName(
      _group: string,
      _category: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttributes(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        string,
        string,
        string,
        string,
        number,
        number
      ] & {
        group: string;
        category: string;
        name: string;
        tag: string;
        minter: string;
        soulbound: string;
        metadata: string;
        width: number;
        height: number;
      }
    >;

    getCategoryCount(
      _group: string,
      overrides?: CallOverrides
    ): Promise<number>;

    getCategoryNameAtIndex(
      _group: string,
      _categoryIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getGroupCount(overrides?: CallOverrides): Promise<number>;

    getGroupNameAtIndex(
      _groupIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<string>;

    getRawAsset(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, number, string, string, string, string, BigNumber[]] & {
        groupId: number;
        categoryId: number;
        name: string;
        minter: string;
        metadata: string;
        soulbound: string;
        partsIds: BigNumber[];
      }
    >;

    getRawPart(
      _partId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[string, string] & { body: string; color: string }>;

    getStringValidator(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    registerAsset(
      _assetInfo: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    registerAssets(
      _assetInfos: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAdmin(_admin: string, overrides?: CallOverrides): Promise<void>;

    setDisableWhitelist(
      _disable: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setDisabled(
      _assetId: BigNumberish,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    setPathDecoder(_decoder: string, overrides?: CallOverrides): Promise<void>;

    setValidator(_validator: string, overrides?: CallOverrides): Promise<void>;

    setWhitelistStatus(
      _address: string,
      _status: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    validator(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "AssetRegistered(address,uint256)"(
      from?: null,
      assetId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; assetId: BigNumber }
    >;

    AssetRegistered(
      from?: null,
      assetId?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { from: string; assetId: BigNumber }
    >;

    "CategoryAdded(string,string)"(
      group?: null,
      category?: null
    ): TypedEventFilter<[string, string], { group: string; category: string }>;

    CategoryAdded(
      group?: null,
      category?: null
    ): TypedEventFilter<[string, string], { group: string; category: string }>;

    "GroupAdded(string)"(
      group?: null
    ): TypedEventFilter<[string], { group: string }>;

    GroupAdded(group?: null): TypedEventFilter<[string], { group: string }>;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;
  };

  estimateGas: {
    admin(overrides?: CallOverrides): Promise<BigNumber>;

    decoder(overrides?: CallOverrides): Promise<BigNumber>;

    generateSVG(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    generateSVGPart(
      _assetId: BigNumberish,
      _tag: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetCount(overrides?: CallOverrides): Promise<BigNumber>;

    getAssetCountInCategory(
      _group: string,
      _category: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetIdInCategory(
      _group: string,
      _category: string,
      _assetIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAssetIdWithName(
      _group: string,
      _category: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAttributes(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryCount(
      _group: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCategoryNameAtIndex(
      _group: string,
      _categoryIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGroupCount(overrides?: CallOverrides): Promise<BigNumber>;

    getGroupNameAtIndex(
      _groupIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRawAsset(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRawPart(
      _partId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getStringValidator(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    registerAsset(
      _assetInfo: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAssets(
      _assetInfos: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisableWhitelist(
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setDisabled(
      _assetId: BigNumberish,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setPathDecoder(
      _decoder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setValidator(
      _validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setWhitelistStatus(
      _address: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    validator(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    admin(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decoder(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    generateSVG(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    generateSVGPart(
      _assetId: BigNumberish,
      _tag: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getAssetCountInCategory(
      _group: string,
      _category: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetIdInCategory(
      _group: string,
      _category: string,
      _assetIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAssetIdWithName(
      _group: string,
      _category: string,
      _name: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAttributes(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryCount(
      _group: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCategoryNameAtIndex(
      _group: string,
      _categoryIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGroupCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getGroupNameAtIndex(
      _groupIndex: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRawAsset(
      _assetId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRawPart(
      _partId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getStringValidator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    registerAsset(
      _assetInfo: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAssets(
      _assetInfos: {
        group: string;
        category: string;
        name: string;
        minter: string;
        soulbound: string;
        metadata: BytesLike;
        parts: { body: BytesLike; color: string }[];
      }[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setAdmin(
      _admin: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisableWhitelist(
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setDisabled(
      _assetId: BigNumberish,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setPathDecoder(
      _decoder: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setValidator(
      _validator: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setWhitelistStatus(
      _address: string,
      _status: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    validator(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
